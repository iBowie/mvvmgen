// ***********************************************************************
// ⚡ MvvmLightGen => https://github.com/iBowie/mvvmgen
// Based on MvvmGen by by Thomas Claudius Huber (https://github.com/thomasclaudiushuber/mvvmgen)
// Copyright © by Thomas Claudius Huber (Adapted to MvvmLight by BowieD)
// Licensed under the MIT license => See LICENSE file in repository root
// ***********************************************************************

using Xunit;

namespace MvvmLightGen.SourceGenerators
{
    public class CommandAttributeTests : ViewModelGeneratorTestsBase
    {
        [Fact]
        public void GenerateCommandProperty()
        {
            ShouldGenerateExpectedCode(
      @"using MvvmLightGen;

namespace MyCode
{
  [ViewModel]
  public partial class EmployeeViewModel
  {
    [Command]public void SaveAll() { }
  }
}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SaveAllCommand = new DelegateCommand(_ => SaveAll());
        }}

        public DelegateCommand SaveAllCommand {{ get; private set; }}
    }}
}}
");
        }

        [InlineData("CanExecuteMethod=\"CanSaveAll\"")]
        [InlineData("CanExecuteMethod=nameof(CanSaveAll)")]
        [InlineData("nameof(CanSaveAll)")]
        [InlineData("\"CanSaveAll\"")]
        [Theory]
        public void GenerateCommandPropertyWithCanExecuteMethod(string attributeArgument)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
    [ViewModel]
    public partial class EmployeeViewModel
    {{
        [Command({attributeArgument})]
        public void SaveAll() {{ }}

        public bool CanSaveAll() => true;
    }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SaveAllCommand = new DelegateCommand(_ => SaveAll(), _ => CanSaveAll());
        }}

        public DelegateCommand SaveAllCommand {{ get; private set; }}
    }}
}}
");
        }

        [InlineData("CanExecuteMethod=nameof(CanSaveAll)")]
        [InlineData("CanExecuteMethod=\"CanSaveAll\"")]
        [InlineData("nameof(CanSaveAll)")]
        [InlineData("\"CanSaveAll\"")]
        [Theory]
        public void GenerateCommandPropertyWithCanExecuteMethodAndCommandNameUsingNamedArgument(string canExecuteParameter)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
  [ViewModel]
  public partial class EmployeeViewModel
  {{
    [Command({canExecuteParameter}, PropertyName=""SuperCommand"")]
    public void SaveAll() {{ }}

    public bool CanSaveAll() => true;
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SuperCommand = new DelegateCommand(_ => SaveAll(), _ => CanSaveAll());
        }}

        public DelegateCommand SuperCommand {{ get; private set; }}
    }}
}}
");
        }

        [InlineData("async x => await Save(x), _ => CanSave()", "async Task Save(object o)", "bool CanSave()")]
        [InlineData("async _ => await Save(), _ => CanSave()", "async Task Save()", "bool CanSave()")]
        [InlineData("_ => Save(), _ => CanSave()", "async void Save()", "bool CanSave()")]
        [InlineData("_ => Save(), _ => CanSave()", "void Save()", "bool CanSave()")]
        [InlineData("Save, _ => CanSave()", "void Save(object o)", "bool CanSave()")]
        [InlineData("Save, CanSave", "void Save(object o)", "bool CanSave(object o)")]
        [InlineData("_ => Save(), CanSave", "void Save()", "bool CanSave(object o)")]
        [Theory]
        public void GenerateCommandWithParametersOnMethods(string expectedConstructorArguments,
            string executeMethod, string canExecuteMethod)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
    [ViewModel]
    public partial class EmployeeViewModel
    {{
        [Command(CanExecuteMethod=nameof(CanSave))]
        public {executeMethod} {{ }}

        public {canExecuteMethod} => true;
    }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SaveCommand = new DelegateCommand({expectedConstructorArguments});
        }}

        public DelegateCommand SaveCommand {{ get; private set; }}
    }}
}}
");
        }
    }
}
