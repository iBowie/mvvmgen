// ***********************************************************************
// ⚡ MvvmLightGen => https://github.com/thomasclaudiushuber/mvvmgen
// Copyright © by Thomas Claudius Huber
// Licensed under the MIT license => See LICENSE file in repository root
// ***********************************************************************

using Xunit;

namespace MvvmLightGen.SourceGenerators
{
    public class PropertyCallMethodAttributeTests : ViewModelGeneratorTestsBase
    {
        [InlineData("MyMethod();", "", "[PropertyCallMethod(nameof(MyMethod))]")]
        [InlineData("MyMethod();", "", "[PropertyCallMethod(\"MyMethod\")]")]
        [InlineData("MyMethod(_selectedItem);", "string item", "[PropertyCallMethod(nameof(MyMethod),MethodArgs=\"_selectedItem\")]")]
        [Theory]
        public void GenerateMethodCallInProperty(string expectedMethodCall, string methodParameters, string onChangeCallMethodAttribute)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;
using MvvmLightGen.Events;

namespace MyCode
{{
  [ViewModel(GenerateConstructor=false)]
  public partial class EmployeeViewModel
  {{
    private void MyMethod({methodParameters}){{ }}

    {onChangeCallMethodAttribute}
    [Property]
    private string _selectedItem;
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public string SelectedItem
        {{
            get => _selectedItem;
            set
            {{
                if (_selectedItem != value)
                {{
                    _selectedItem = value;
                    OnPropertyChanged(""SelectedItem"");
                    {expectedMethodCall}
                }}
            }}
        }}
    }}
}}
");
        }
    }

}

