// ***********************************************************************
// ⚡ MvvmLightGen => https://github.com/thomasclaudiushuber/mvvmgen
// Copyright © by Thomas Claudius Huber
// Licensed under the MIT license => See LICENSE file in repository root
// ***********************************************************************

using Xunit;

namespace MvvmLightGen.SourceGenerators
{
    public partial class InjectAttributeTests : ViewModelGeneratorTestsBase
    {
        [InlineData("empDbProvider", "EmpDbProvider", ", PropertyName=\"EmpDbProvider\"")]
        [InlineData("empDbProvider", "EmpDbProvider", ", \"EmpDbProvider\"")]
        [InlineData("employeeDataProvider", "EmployeeDataProvider", "")]
        [Theory]
        public void GeneratePropertyOfInjectedType(string expectedConstructorParameterName, string expectedPropertyName, string attributeArgument)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
  public interface IEmployeeDataProvider {{}}

  [Inject(typeof(IEmployeeDataProvider){attributeArgument}))]
  [ViewModel]
  public partial class EmployeeViewModel
  {{
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MyCode.IEmployeeDataProvider {expectedConstructorParameterName})
        {{
            this.{expectedPropertyName} = {expectedConstructorParameterName};
            this.OnInitialize();
        }}

        partial void OnInitialize();

        protected MyCode.IEmployeeDataProvider {expectedPropertyName} {{ get; private set; }}
    }}
}}
");
        }

        [InlineData("private", "AccessModifier.Private")]
        [InlineData("protected internal", "AccessModifier.ProtectedInternal")]
        [InlineData("protected", "AccessModifier.Protected")]
        [InlineData("internal", "AccessModifier.Internal")]
        [InlineData("public", "AccessModifier.Public")]
        [InlineData("protected", "")]
        [Theory]
        public void GeneratePropertyWithSpecifiedAccessModifier(string expectedAccessModifier, string attributeAccessModifier)
        {
            var namedArgumentForAttribute = "";
            if (attributeAccessModifier is { Length: > 0 })
            {
                namedArgumentForAttribute = $",PropertyAccessModifier = {attributeAccessModifier}";
            }

            var expectedSetterAccessModifier = expectedAccessModifier == "private" ? "" : "private";

            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
  public interface INavigationViewModel {{}}

  [Inject(typeof(INavigationViewModel){namedArgumentForAttribute})]
  [ViewModel]
  public partial class EmployeeViewModel
  {{
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MyCode.INavigationViewModel navigationViewModel)
        {{
            this.NavigationViewModel = navigationViewModel;
            this.OnInitialize();
        }}

        partial void OnInitialize();

        {expectedAccessModifier} MyCode.INavigationViewModel NavigationViewModel {{ get; {expectedSetterAccessModifier} set; }}
    }}
}}
");
        }

        [Fact]
        public void GeneratePropertyOfInjectedType2()
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
  [Inject(typeof(MvvmLightGen.Events.IEventAggregator)))]
  [ViewModel]
  public partial class EmployeeViewModel
  {{
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MvvmLightGen.Events.IEventAggregator eventAggregator)
        {{
            this.EventAggregator = eventAggregator;
            this.OnInitialize();
        }}

        partial void OnInitialize();

        protected MvvmLightGen.Events.IEventAggregator EventAggregator {{ get; private set; }}
    }}
}}
");
        }


        [Fact]
        public void GenerateConstructorAndPropertiesInOrderOfInjectAttributesBottomUp()
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;

namespace MyCode
{{
  public interface IEventAggregator {{}}
  public interface IEmployeeDataProvider {{}}
  public interface IDialogService {{}}


  [Inject(typeof(IDialogService))]
  [Inject(typeof(IEmployeeDataProvider))]
  [Inject(typeof(IEventAggregator))]
  [ViewModel]
  public partial class EmployeeViewModel
  {{
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MyCode.IEventAggregator eventAggregator, MyCode.IEmployeeDataProvider employeeDataProvider, MyCode.IDialogService dialogService)
        {{
            this.EventAggregator = eventAggregator;
            this.EmployeeDataProvider = employeeDataProvider;
            this.DialogService = dialogService;
            this.OnInitialize();
        }}

        partial void OnInitialize();

        protected MyCode.IEventAggregator EventAggregator {{ get; private set; }}

        protected MyCode.IEmployeeDataProvider EmployeeDataProvider {{ get; private set; }}

        protected MyCode.IDialogService DialogService {{ get; private set; }}
    }}
}}
");
        }
    }
}
