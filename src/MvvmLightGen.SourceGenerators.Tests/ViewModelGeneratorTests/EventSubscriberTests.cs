// ***********************************************************************
// ⚡ MvvmLightGen => https://github.com/iBowie/mvvmgen
// Based on MvvmGen by by Thomas Claudius Huber (https://github.com/thomasclaudiushuber/mvvmgen)
// Copyright © by Thomas Claudius Huber (Adapted to MvvmLight by BowieD)
// Licensed under the MIT license => See LICENSE file in repository root
// ***********************************************************************

using Xunit;

namespace MvvmLightGen.SourceGenerators
{
    public class EventSubscriberTests : ViewModelGeneratorTestsBase
    {
        [Fact]
        public void ShouldAddEventAggregatorConstructorParameterAndSubscribe()
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;
using MvvmLightGen.Events;

namespace MyCode
{{
  [ViewModel]
  public partial class EmployeeViewModel : IEventSubscriber<string,int>
  {{
      public void OnEvent(string x) {{ }}

      public void OnEvent(int x) {{ }}
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MvvmLightGen.Events.IEventAggregator eventAggregator)
        {{
            eventAggregator.RegisterSubscriber(this);
            this.OnInitialize();
        }}

        partial void OnInitialize();
    }}
}}
");
        }

        [Fact]
        public void ShouldSubscribeWithInjectedEventAggregator()
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;
using MvvmLightGen.Events;

namespace MyCode
{{
  [Inject(typeof(IEventAggregator))]
  [ViewModel]
  public partial class EmployeeViewModel : IEventSubscriber<string,int>
  {{
      public void OnEvent(string x) {{ }}

      public void OnEvent(int x) {{ }}
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MvvmLightGen.Events.IEventAggregator eventAggregator)
        {{
            this.EventAggregator = eventAggregator;
            this.EventAggregator.RegisterSubscriber(this);
            this.OnInitialize();
        }}

        partial void OnInitialize();

        protected MvvmLightGen.Events.IEventAggregator EventAggregator {{ get; private set; }}
    }}
}}
");
        }

        [Fact]
        public void ShouldSubscribeWithInjectedEventAggregatorWithCustomName()
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmLightGen;
using MvvmLightGen.Events;

namespace MyCode
{{
  [Inject(typeof(IEventAggregator),""AwesomeEventAggregator"")]
  [ViewModel]
  public partial class EmployeeViewModel : IEventSubscriber<string,int>
  {{
      public void OnEvent(string x) {{ }}

      public void OnEvent(int x) {{ }}
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : global::MvvmLightGen.ViewModels.ViewModelBase
    {{
        public EmployeeViewModel(MvvmLightGen.Events.IEventAggregator awesomeEventAggregator)
        {{
            this.AwesomeEventAggregator = awesomeEventAggregator;
            this.AwesomeEventAggregator.RegisterSubscriber(this);
            this.OnInitialize();
        }}

        partial void OnInitialize();

        protected MvvmLightGen.Events.IEventAggregator AwesomeEventAggregator {{ get; private set; }}
    }}
}}
");
        }
    }
}
